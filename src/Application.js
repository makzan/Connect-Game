// Generated by CoffeeScript 1.6.3
(function() {
  import ui.TextView as TextView;
  import ui.View as View;
  import src.Setting as Setting;
  import src.gameobject.DotsGrid as DotsGrid;
  import device;
  var Game, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      _ref = Game.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Game.prototype.initUI = function() {
      var bg, dot_grid, score_text,
        _this = this;
      bg = new View({
        superview: this,
        width: Setting.game_width,
        height: Setting.game_height,
        backgroundColor: '#efefef'
      });
      if (device.width / 2 >= Setting.game_width && device.height / 2 >= Setting.game_height) {
        GC.app.view.style.scale = 2;
        GC.app.view.style.x = 0;
        GC.app.view.style.y = 0;
        this.style.x = device.width / 2 / GC.app.view.style.scale - Setting.game_width / 2;
        this.style.y = device.height / 2 / GC.app.view.style.scale - Setting.game_height / 2;
      }
      dot_grid = new DotsGrid({
        superview: this,
        x: 0,
        y: 0
      });
      dot_grid.on("score:update", function(count) {
        var text;
        _this.score += Math.pow(2, count - 1);
        text = _this.score + "";
        if (text.length === 1) {
          text = "0000" + text;
        }
        if (text.length === 2) {
          text = "000" + text;
        }
        if (text.length === 3) {
          text = "00" + text;
        }
        if (text.length === 4) {
          text = "0" + text;
        }
        return score_text.setText(text);
      });
      this.score = 0;
      return score_text = new TextView({
        superview: this,
        x: 4,
        y: 4,
        width: Setting.game_width,
        height: 20,
        horizontalAlign: "left",
        text: "00000",
        size: 24,
        color: '#222222'
      });
    };

    Game.prototype.launchUI = function() {
      return true;
    };

    return Game;

  })(GC.Application);

  exports = Game;

}).call(this);
